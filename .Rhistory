getwd()
#loop
for(i in 1:10){
print(i)
}
x <- c("a","b","c")
for(i in 1:4){
print(x[i])
}
for(i in seq_along(x)){
print(x(i))
}
for(i in seq_along(x)){
print(x[i]
}
for(i in seq_along(x)){
print(x)
}
for(i in seq_along(x)){
print(x[i])
}
for(i in 1:4){
print(x[i])
}
for(letter in x){
print(letter)
}
for(letter in x) print(x[i])
for(letter in x) print(letter)
for(i in seq_along(x)){
print(x[i])
}
help(seek_along)
??seek_along
?seek_along
?seq_len
x<- matrix(1:6,2,3)
x
x<- matrix(1:6,2,3)
for(i in seq_len(nrow(x))){
for (j in seq_len(ncol(x))){
print(x[i,j])
for(i in seq_len(nrow(x))){
for (j in seq_len(ncol(x))){
print(x[i,j])
}
}
for(i in seq_len(nrow(x))){
for (j in seq_len(ncol(x))){
print(x[i,j])
}
}
count <- 0
while(count < 10){
print(count)
count <- count +1
}
z <- 5
while(z >= 3 && z<= 10){
print(z)
coin <- rbinom(1,1,.5)
if(coin ==1){
z <- z +1
}else{
z <- z -1
}
}
z <- 5
while(z >= 3 && z<= 10){
print(z)
coin <- rbinom(1,1,.5)
if(coin ==1){
z <- z +1
}else{
z <- z -1
}
}
z <- 5
while(z >= 3 && z<= 10){
print(z)
coin <- rbinom(1,1,.5)
if(coin ==1){
z <- z +1
}else{
z <- z -1
}
}
z <- 5
while(z >= 3 && z<= 10){
print(z)
coin <- rbinom(1,1,.5)
if(coin ==1){
z <- z +1
}else{
z <- z -1
}
}
z <- 5
while(z >= 3 && z<= 10){
print(z)
coin <- rbinom(1,1,.5)
if(coin ==1){
z <- z +1
}else{
z <- z -1
}
}
z <- 5
while(z >= 3 && z<= 10){
print(z)
coin <- rbinom(1,1,.5)
if(coin ==1){
z <- z +1
}else{
z <- z -1
}
}
z <- 5
while(z >= 3 && z<= 10){
print(z)
coin <- rbinom(1,1,.5)
if(coin ==1){
z <- z +1
}else{
z <- z -1
}
}
z <- 5
while(z >= 1 && z<= 10){
print(z)
coin <- rbinom(1,1,.5)
if(coin ==1){
z <- z +1
}else{
z <- z -1
}
}
z <- 5
while(z >= 1 && z<= 10){
print(z)
coin <- rbinom(1,1,.5)
if(coin ==1){
z <- z +1
}else{
z <- z -1
}
}
z <- 5
while(z >= 1 && z<= 10){
print(z)
coin <- rbinom(1,1,.5)
if(coin ==1){
z <- z +1
}else{
z <- z -1
}
}
z <- 5
while(z >= 1 && z<= 10){
print(z)
coin <- rbinom(1,1,.5)
if(coin ==1){
z <- z +1
}else{
z <- z -1
}
}
repeat{
x1 <- computeEstimate()
if(abs (x1 - x0) < tol){
break
}else{
x0 <- x1
}
}
for(i in 1:100){
if(i<= 20){
next()
}
print(i)
}
for(i in 1:100){
if(i<= 20 | x>= 40){
next()
}
print(i)
}
for(i in 1:100){
if(i<= 20 | i>= 40){
next()
}
print(i)
}
for(i in 1:100){
if(i<= 20 || i>= 40){
next()
}
print(i)
}
for(i in 1:100){
print(i)
if(i==10) break
}
add2 <- function(x,y){
z = x + y
return(z)
}
add2(3,5)
above10 <- function(x){
use <- x >10
x[use]
}
x <- c(5,16,3,46)
above10(x)
above <- function(x,n){
use <- x > n
x[use]
}
x
above(x,3)
above(x,2)
above(x,40)
above(x)
above <- function(x,n = 10){
use <- x > n
x[use]
}
above(x)
above(x,15)
above(x,20)
above(x)
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for(in in 1:nc){
means[i] <- mean(y[,i])
}
return(means)
}
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for(in in 1:nc){
means[i] <- mean(y[,i])
}
return(means)
}
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i])
}
return(means)
}
read.csv(hw1_data.csv)
getwd()
setwd(~/Cronio/R_Programming)
setwd("~/Cronio/R_Programming")
setwd("~/GitHub/R_Programming")
read.csv(hw1_data.csv)
read.csv("hw1_data.csv")
x <- read.csv("hw1_data.csv")
colmean(x)
columnmean(x)
columnmean <- function(y,removeNA = TRUE){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i],na.rm == removeNA)
}
return(means)
}
columnmean(x)
na.rm(x)
?na.rm
??na.rm
columnmean <- function(y,removeNA = TRUE){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i],na.rm = removeNA)
}
return(means)
}
columnmean(x)
?mean
args(lm)
